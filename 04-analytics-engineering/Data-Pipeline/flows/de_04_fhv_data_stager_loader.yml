id: fhv_data_stager_loader
namespace: de_04

variables:
  file: "fhv_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.fhv_tripdata_{{trigger.date | date('yyyy-MM')}}"
  data: "{{outputs.extract.outputFiles['fhv_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      date: "{{(trigger.date | date('yyyy-MM'))}}"

  # - id: download_extract
  #   type: io.kestra.plugin.scripts.shell.Commands
  #   outputFiles:
  #     - "*.csv"
  #   taskRunner:
  #     type: io.kestra.plugin.core.runner.Process
  #   commands:            
  #     - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/fhv/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}


  # - id: upload_to_gcs
  #   type: io.kestra.plugin.gcp.gcs.Upload
  #   from: "{{render(vars.data)}}"
  #   to: "{{render(vars.gcs_file)}}"


  - id: bq_fhv_tripdata
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.fhv_tripdata`
      (
          unique_row_id BYTES OPTIONS (description = 'A unique identifier for the fhv, generated by hashing key trip attributes.'),
          filename STRING OPTIONS (description = 'The source filename from which the fhv data was loaded.'),      
          dispatching_base_num STRING OPTIONS (description = 'some var'),
          pickup_datetime TIMESTAMP OPTIONS (description = 'some var'),
          dropoff_datetime TIMESTAMP OPTIONS (description = 'some var'),
          PULocationID INT64 OPTIONS (description = 'some var'),
          DOLocationID INT64 OPTIONS (description = 'some var'),
          SR_Flag STRING OPTIONS (description = 'some var'),
          Affiliated_base_number STRING OPTIONS (description = 'some var')
      )
      PARTITION BY DATE(pickup_datetime);

  # Create table with raw data
  - id: bq_fhv_tripdata_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
      (
          dispatching_base_num STRING OPTIONS (description = 'some var'),
          pickup_datetime TIMESTAMP OPTIONS (description = 'some var'),
          dropoff_datetime TIMESTAMP OPTIONS (description = 'some var'),
          PULocationID INT64 OPTIONS (description = 'some var'),
          DOLocationID INT64 OPTIONS (description = 'some var'),
          SR_Flag STRING OPTIONS (description = 'some var'),
          Affiliated_base_number STRING OPTIONS (description = 'some var')
      )
      OPTIONS (
          format = 'CSV',
          uris = ['{{render(vars.gcs_file)}}'],
          skip_leading_rows = 1,
          ignore_unknown_values = TRUE
      );

  # Create materialized table with raw data
  - id: bq_fhv_tripdata_stg
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_clean` AS
      SELECT *
      FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  # Clean data
  - id: bq_fhv_tripdata_clean
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_clean` AS
      SELECT
      TRIM(dispatching_base_num) as dispatching_base_num, pickup_datetime, dropoff_datetime, PULocationID, DOLocationID, SR_Flag, Affiliated_base_number
      FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_clean`;
#UPDATE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_clean`  set dispatching_base_num = TRIM(dispatching_base_num);

  # add unique identifier and source filename
  - id: bq_fhv_tripdata_temp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
      AS
      SELECT
        MD5(CONCAT(
          COALESCE(CAST(dispatching_base_num AS STRING), ""),
          COALESCE(CAST(pickup_datetime AS STRING), ""),
          COALESCE(CAST(dropoff_datetime AS STRING), ""),
          COALESCE(CAST(PULocationID AS STRING), ""),
          COALESCE(CAST(DOLocationID AS STRING), "")
        )) AS unique_row_id,
        "{{render(vars.file)}}" AS filename,
        *
      FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_clean`;

  - id: bq_fhv_merge
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.fhv_tripdata` T
      USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (unique_row_id, filename, dispatching_base_num, pickup_datetime, dropoff_datetime, PULocationID, DOLocationID, SR_Flag, Affiliated_base_number)
        VALUES (S.unique_row_id, S.filename, S.dispatching_base_num, S.pickup_datetime, S.dropoff_datetime, S.PULocationID, S.DOLocationID, S.SR_Flag, S.Affiliated_base_number);

  - id: bq_delete_table_ext
    type: io.kestra.plugin.gcp.bigquery.DeleteTable
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    dataset: "{{kv('GCP_DATASET')}}"
    table: "fhv_tripdata_{{trigger.date | date('yyyy-MM')}}_ext"
  
  - id: bq_delete_table_clean
    type: io.kestra.plugin.gcp.bigquery.DeleteTable
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    dataset: "{{kv('GCP_DATASET')}}"
    table: "fhv_tripdata_{{trigger.date | date('yyyy-MM')}}_clean"

  - id: bq_delete_table_merge
    type: io.kestra.plugin.gcp.bigquery.DeleteTable
    projectId: "{{kv('GCP_PROJECT_ID')}}"
    dataset: "{{kv('GCP_DATASET')}}"
    table: "fhv_tripdata_{{trigger.date | date('yyyy-MM')}}"

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: To avoid cluttering your storage, we will remove the downloaded files
    
pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: fhv_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"